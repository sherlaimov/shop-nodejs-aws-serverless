service: product-service
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  environment:
    REGION: 'eu-west-1'
    ENV_STAGE: ${opt:stage, 'dev'}
    PGHOST: ${self:custom.dotenvVars.PGHOST, env:PGHOST, ''}
    PGUSER: ${self:custom.dotenvVars.PGUSER, env:PGUSER, ''}
    PGDATABASE: ${self:custom.dotenvVars.PGDATABASE, env:PGDATABASE, ''}
    PGPASSWORD: ${self:custom.dotenvVars.PGPASSWORD, env:PGPASSWORD, ''}
    PGPORT: ${self:custom.dotenvVars.PGPORT, env:PGPORT, ''}
    CREATE_PRODUCT_SNS_ARN: arn:aws:sns:eu-west-1:984152597152:createProductTopic
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
          - 'arn:aws:dynamodb:eu-west-1:*:table/*' 
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - Ref: "createProductTopic"

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: true
    dotenvVars: ${file(configs.js)}

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
          batchSize: 5
      - sns:
          arn: !Ref createProductTopic
          topicName: createProductTopic
          filterPolicyScope: MessageBody
          filterPolicy:
            price:
              - 50

resources:
  Resources:
    Products:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: Products
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Stock:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: Stock
        AttributeDefinitions:
        - AttributeName: "product_id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "product_id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "catalogItemsQueue"
        MessageRetentionPeriod: 60

    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "createProductTopic"

    emailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: "email"
        Endpoint: "sherlaimov@gmail.com"
        TopicArn:
          Ref: "createProductTopic"
  